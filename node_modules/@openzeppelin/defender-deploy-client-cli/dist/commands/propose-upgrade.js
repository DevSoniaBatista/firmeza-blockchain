"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.proposeUpgrade = void 0;
const minimist_1 = __importDefault(require("minimist"));
const upgrade_contract_1 = require("../internal/upgrade-contract");
const client_1 = require("../internal/client");
const utils_1 = require("../internal/utils");
const USAGE = `${utils_1.USAGE_COMMAND_PREFIX} proposeUpgrade --proxyAddress <PROXY_ADDRESS> --newImplementationAddress <NEW_IMPLEMENTATION_ADDRESS> --chainId <CHAIN_ID> [--proxyAdminAddress <PROXY_ADMIN_ADDRESS>] [--contractArtifactFile <CONTRACT_ARTIFACT_FILE_PATH>] [--approvalProcessId <UPGRADE_APPROVAL_PROCESS_ID>]`;
const DETAILS = `
Proposes an upgrade using OpenZeppelin Defender.

Required options:
  --proxyAddress <PROXY_ADDRESS>  Address of the proxy to upgrade.
  --newImplementationAddress <NEW_IMPLEMENTATION_ADDRESS>  Address of the new implementation contract.
  --chainId <CHAIN_ID>            Chain ID of the network to use.

Additional options:
  --proxyAdminAddress <PROXY_ADMIN_ADDRESS>  Address of the proxy's admin. Required if the proxy is a transparent proxy.
  --contractArtifactFile <CONTRACT_ARTIFACT_FILE_PATH>  Path to a JSON file that contains an "abi" entry, where its value will be used as the new implementation ABI.
  --approvalProcessId <UPGRADE_APPROVAL_PROCESS_ID>  The ID of the upgrade approval process. Defaults to the upgrade approval process configured for your deployment environment on Defender.
`;
async function proposeUpgrade(args, deployClient, networkClient) {
    const { parsedArgs, extraArgs } = parseArgs(args);
    if (!help(parsedArgs)) {
        const functionArgs = await getFunctionArgs(parsedArgs, extraArgs, networkClient);
        const client = deployClient ?? (0, client_1.getDeployClient)();
        const upgradeResponse = await (0, upgrade_contract_1.upgradeContract)(functionArgs, client);
        console.log(`Upgrade proposal created.`);
        console.log(`Proposal ID: ${upgradeResponse.proposalId}`);
        if (upgradeResponse.externalUrl !== undefined) {
            console.log(`Proposal URL: ${upgradeResponse.externalUrl}`);
        }
    }
}
exports.proposeUpgrade = proposeUpgrade;
function parseArgs(args) {
    const parsedArgs = (0, minimist_1.default)(args, {
        boolean: [
            'help',
        ],
        string: ['proxyAddress', 'newImplementationAddress', 'chainId', 'proxyAdminAddress', 'contractArtifactFile', 'approvalProcessId'],
        alias: { h: 'help' },
    });
    const extraArgs = parsedArgs._;
    return { parsedArgs, extraArgs };
}
function help(parsedArgs) {
    if (!parsedArgs['help']) {
        return false;
    }
    else {
        console.log(USAGE);
        console.log(DETAILS);
        return true;
    }
}
/**
 * Gets and validates function arguments and options.
 * @returns Function arguments
 * @throws Error if any arguments or options are invalid.
 */
async function getFunctionArgs(parsedArgs, extraArgs, networkClient) {
    if (extraArgs.length !== 0) {
        throw new Error('The proposeUpgrade command does not take any arguments, only options.');
    }
    else {
        // Required options
        const proxyAddress = (0, utils_1.getAndValidateString)(parsedArgs, 'proxyAddress', true);
        const newImplementationAddress = (0, utils_1.getAndValidateString)(parsedArgs, 'newImplementationAddress', true);
        const networkString = (0, utils_1.getAndValidateString)(parsedArgs, 'chainId', true);
        const network = await (0, utils_1.getNetwork)(parseInt(networkString), networkClient);
        // Additional options
        const proxyAdminAddress = (0, utils_1.getAndValidateString)(parsedArgs, 'proxyAdminAddress');
        const contractArtifactFile = (0, utils_1.getAndValidateString)(parsedArgs, 'contractArtifactFile');
        const approvalProcessId = (0, utils_1.getAndValidateString)(parsedArgs, 'approvalProcessId');
        checkInvalidArgs(parsedArgs);
        return { proxyAddress, newImplementationAddress, network, proxyAdminAddress, contractArtifactFile, approvalProcessId };
    }
}
function checkInvalidArgs(parsedArgs) {
    const invalidArgs = Object.keys(parsedArgs).filter(key => ![
        'help',
        'h',
        '_',
        'proxyAddress',
        'newImplementationAddress',
        'chainId',
        'proxyAdminAddress',
        'contractArtifactFile',
        'approvalProcessId',
    ].includes(key));
    if (invalidArgs.length > 0) {
        throw new Error(`Invalid options: ${invalidArgs.join(', ')}`);
    }
}
//# sourceMappingURL=propose-upgrade.js.map